:py:mod:`ocebuild.pipeline.config`
==================================

.. py:module:: ocebuild.pipeline.config

.. autoapi-nested-parse::

   Methods for retrieving and handling config.plist files and patches.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   ocebuild.pipeline.config.read_config
   ocebuild.pipeline.config.apply_preprocessor_tags
   ocebuild.pipeline.config.merge_configs
   ocebuild.pipeline.config.get_configuration_schema



.. py:function:: read_config(filepath: str, frontmatter: bool = False, flags: Optional[List[str]] = None) -> Tuple[dict, Union[dict, None]]

   Reads a configuration file.

   :param filepath: The path to the configuration file.
   :param frontmatter: Whether to include the file's frontmatter.
   :param flags: The flags to apply to the configuration file.

   :raises ValueError: If the file extension is not supported.

   :returns: The configuration file.

             If `frontmatter` is `True`, a tuple containing:
               - The configuration file.
               - The frontmatter of the configuration file.


.. py:function:: apply_preprocessor_tags(a: dict, b: dict, tags: List[Tuple[str, List[str], Union[str, None]]]) -> None

   Applies preprocessor tags from dict `b` on dict `a`.

   :param a: The dict to apply preprocessor tags to.
   :param b: The dict annotated by the preprocessor tags.
   :param tags: The preprocessor tags to apply.

   :raises ValueError: If the tag is not recognized.

   .. rubric:: Notes

   Preprocessor tags are applied in the following order:
   - @append: Append values from `b` to `a`.
   - @delete: Delete `a` and `b` if `b` is empty.
   - @fallback: Use `b` if `a` is empty.
   - @override: Override `a` with `b` if `a` contains the same key.
   - @prepend: Prepend values from `b` to `a`.


.. py:function:: merge_configs(base: Union[str, ocebuild.third_party.cpython.pathlib.Path], *patches: Union[str, ocebuild.third_party.cpython.pathlib.Path], flags: Optional[List[str]] = None) -> Dict

   Merges a set of plist or yaml config files into a single config.

   :param base: The base config file.
   :param \*patches: The patch config files.
   :param flags: The flags to apply to the configuration file.

   :returns: The merged config.

   :raises ValueError: If a patch file is not a plist or yaml file.

   .. rubric:: Example

   >>> merge_configs('base.plist', 'patch1.yml', 'patch2.plist', 'patch2.yaml')
   {...}


.. py:function:: get_configuration_schema(repository: str = 'acidanthera/OpenCorePkg', branch: str = 'master', tag: Union[str, None] = None, commit: Union[str, None] = None, get_sample: bool = False, **kwargs) -> Union[dict, Tuple[dict, dict]]

   Reads the Sample.plist schema from a OpenCorePkg version.


