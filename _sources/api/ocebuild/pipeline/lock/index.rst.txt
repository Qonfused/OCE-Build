:py:mod:`ocebuild.pipeline.lock`
================================

.. py:module:: ocebuild.pipeline.lock

.. autoapi-nested-parse::

   Methods for handling and resolving lock files.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   ocebuild.pipeline.lock.parse_semver_params
   ocebuild.pipeline.lock.parse_specifier
   ocebuild.pipeline.lock.read_lockfile
   ocebuild.pipeline.lock.write_lockfile
   ocebuild.pipeline.lock.prune_lockfile
   ocebuild.pipeline.lock.prune_resolver_entry
   ocebuild.pipeline.lock.resolve_specifiers
   ocebuild.pipeline.lock.validate_dependencies



Attributes
~~~~~~~~~~

.. autoapisummary::

   ocebuild.pipeline.lock.LOCKFILE_METADATA
   ocebuild.pipeline.lock.LOCKFILE_WARNING_COMMENT


.. py:data:: LOCKFILE_METADATA

   The current metadata for the lockfile system.

.. py:data:: LOCKFILE_WARNING_COMMENT
   :value: Multiline-String

    .. raw:: html

        <details><summary>Show Value</summary>

    .. code-block:: python

        """
        # This file is generated by running "ocebuild" inside your project.
        # Manual changes might be lost - proceed with caution!
        """

    .. raw:: html

        </details>

   The warning comment generated for new lockfiles.

.. py:function:: parse_semver_params(entry: ocebuild.sources.resolver.Union[str, dict], specifier: str, parameters: ocebuild.sources.resolver.Optional[dict] = None) -> Dict[str, str]

   Parses a semver version entry or specifier for parameters.

   :param entry: The entry to parse additional properties from.
   :param specifier: The specifier string to parse.
   :param parameters: The parameters dictionary to mutate. (Optional)

   :returns: The parameters dictionary.


.. py:function:: parse_specifier(name: str, entry: ocebuild.sources.resolver.Union[str, Dict[str, any]], base_path: ocebuild.sources.resolver.Optional[str] = getcwd()) -> ocebuild.sources.resolver.Union[ocebuild.sources.resolver.GitHubResolver, ocebuild.sources.resolver.PathResolver, ocebuild.sources.resolver.DortaniaResolver, None]

   Parses a specifier string for a resolver class.

   :param name: The name of the entry to parse.
   :param entry: The entry to parse.
   :param base_path: The base path to use for relative paths. (Optional)

   :returns: The resolver class for the specifier.


.. py:function:: read_lockfile(lockfile_path: str, metadata: bool = False) -> ocebuild.sources.resolver.Union[dict, ocebuild.sources.resolver.Tuple[dict, dict]]

   Reads a lockfile from the specified path.


.. py:function:: write_lockfile(lockfile_path: str, lockfile: dict, resolvers: dict, metadata: ocebuild.sources.resolver.Optional[dict] = None) -> dict

   Writes a lockfile to the specified path.

   :param lockfile_path: The path to write the lockfile to.
   :param lockfile: The lockfile to write.
   :param resolvers: The resolved entries to write to the lockfile.
   :param metadata: The lockfile metadata to write. (Optional)


.. py:function:: prune_lockfile(build_config: dict, lockfile: dict) -> ocebuild.sources.resolver.List[dict]

   Prunes the lockfile of entries that are not in the build configuration.

   :param build_config: The build configuration to prune against.
   :param lockfile: The lockfile to prune.

   :returns: A list of removed lockfile entries.


.. py:function:: prune_resolver_entry(resolvers: ocebuild.sources.resolver.List[dict], key: str, value: any) -> None

   Prunes a resolver entry from the list of resolvers.

   :param resolvers: The list of resolvers to prune from.
   :param key: The key to prune by.
   :param value: The value to prune by.

   :raises ValueError: If the resolver entry does not exist.


.. py:function:: resolve_specifiers(build_config: dict, lockfile: dict, base_path: str = getcwd(), update: bool = False, force: bool = False, *args, __wrapper: ocebuild.sources.resolver.Optional[Iterator] = None, **kwargs) -> ocebuild.sources.resolver.List[dict]

   Resolves the specifiers for each entry in the build configuration.

   :param build_config: The build configuration to resolve specifiers for.
   :param lockfile: The lockfile to resolve specifiers against.
   :param base_path: The base path to use for relative paths. (Optional)
   :param update: Whether to update outdated entries in the lockfile. (Optional)
   :param force: Whether to force resolve all entries in the build configuration. (Optional)
   :param \*args: Additional arguments to pass to the optional iterator wrapper.
   :param __wrapper: A wrapper function to apply to the iterator. (Optional)
   :param \*\*kwargs: Additional keyword arguments to pass to the optional iterator wrapper.

   :raises ValueError: If a resolver or the build configuration is invalid.

   :returns: The resolved build configuration.


.. py:function:: validate_dependencies(lockfile: dict, build_config: dict) -> None

   Verifies that the lockfile is consistent with the build file.

   :param lockfile: The lockfile dictionary.
   :param build_config: The build configuration dictionary.

   :raises AssertionError: If the lockfile does not match the build file.


