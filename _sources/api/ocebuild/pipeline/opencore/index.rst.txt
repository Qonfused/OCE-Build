:py:mod:`ocebuild.pipeline.opencore`
====================================

.. py:module:: ocebuild.pipeline.opencore

.. autoapi-nested-parse::

   Methods for retrieving and handling OpenCore packages.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   ocebuild.pipeline.opencore.extract_opencore_archive
   ocebuild.pipeline.opencore.extract_ocbinary_archive
   ocebuild.pipeline.opencore.extract_build_entries
   ocebuild.pipeline.opencore.get_opencore_checksum



.. py:function:: extract_opencore_archive(pkg: ocebuild.third_party.cpython.pathlib.Path, target: Literal[IA32, X64] = 'X64') -> None

   Extracts the contents of an OpenCore archive to a temporary directory.

   :param pkg: Path to an existing OpenCore package.
   :param target: The desired target architecture of the OpenCore EFI.


.. py:function:: extract_ocbinary_archive(pkg: ocebuild.third_party.cpython.pathlib.Path, oc_pkg: ocebuild.third_party.cpython.pathlib.Path) -> None

   Extracts OcBinaryData resources to an existing OpenCore archive.

   :param pkg: Path to an existing OcBinarData archive.
   :param oc_pkg: Path to an existing OpenCore package.


.. py:function:: extract_build_entries(opencore_pkg: ocebuild.third_party.cpython.pathlib.Path, resolvers: List[dict], *args, __wrapper: Optional[Iterator] = None, **kwargs) -> None

   Prunes and extracts build entries from an OpenCore package.

   :param opencore_pkg: The path to the OpenCore package.
   :param resolvers: The build configuration resolvers.
   :param \*args: Additional arguments to pass to the optional iterator wrapper.
   :param __wrapper: A wrapper function to apply to the iterator. (Optional)
   :param \*\*kwargs: Additional keyword arguments to pass to the optional iterator wrapper.

   :returns: A Path to the extracted OpenCore directory.


.. py:function:: get_opencore_checksum(file_path: Union[str, ocebuild.third_party.cpython.pathlib.Path], algorithm=sha256) -> str

   Computes the SHA256 checksum of the OpenCore binary.

   This will compute the checksum of the `OpenCore.efi` binary, substituting the
   embedded public key when using vaulting. Modifications are made to a copy of
   the file within a temporary directory, which is validated and deleted after
   computing the checksum.

   :param file_path: The path to the OpenCore binary.
   :param algorithm: The hashlib algorithm to use. Defaults to SHA256.

   :raises AssertionError: If the file checksum does not match the expected value.
   :raises RuntimeError: If the vault header is not found (i.e. the file is malformed).

   :returns: The SHA256 checksum of the OpenCore binary.


